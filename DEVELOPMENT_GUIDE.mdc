Bu felsefeyi benimsemek, hem bireysel hataları azaltır hem de takımın genel hızını ve ürünün kalitesini uzun vadede artırır.

---

## Güvenlik: Yetkilendirme ve Rol Bazlı Erişim Kontrolü (RBAC)

- **Prensip:** Bir kullanıcının hem belirli sayfalara erişimi hem de bu sayfalardaki eylemleri gerçekleştirme yetkisi, rolüne göre sıkı bir şekilde kontrol edilmelidir. Yetkilendirme, güvenliğin temelidir ve üç ana katmanda uygulanmalıdır: API, Sayfa (Middleware) ve Bileşen (UI).
- **Roller:** Projedeki roller `lib/constants/roles.ts` dosyasında `USER_ROLES` objesi ile merkezi olarak yönetilir. Tüm yetkilendirme işlemleri bu sabitleri kullanmalıdır.

### 24. Katman 1: API Yetkilendirme (En Kritik Katman)

- **Amaç:** Bir kullanıcının belirli bir veriyi görme veya değiştirme yetkisi olup olmadığını sunucu tarafında doğrulamak. Bu katman, ön yüzdeki kontroller atlatılsa bile veri güvenliğini garanti altına alan **en önemli savunma hattıdır.**
- **Uygulama:**
    1.  Tüm hassas API rotalarında (`app/api/`) öncelikle `getToken` veya `getServerSession` ile kullanıcının oturumu ve rolü alınmalıdır.
    2.  İşlemi gerçekleştirmeden önce, kullanıcının rolünün bu eylemi yapmaya yetkili olup olmadığı kontrol edilmelidir.
    3.  Yetkisiz bir istek durumunda, `403 Forbidden` durum kodu ile standart bir hata yanıtı dönülmelidir.

**Örnek: `app/api/admin/users/[id]/route.ts`**
```typescript
import { NextRequest } from 'next/server';
import { getToken } from 'next-auth/jwt';
import { responseHandler } from '@/utils/response-handler';
import { USER_ROLES } from '@/lib/constants';

export async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {
  const token = await getToken({ req });

  // 1. Oturum ve Rol Kontrolü
  if (!token || token.role !== USER_ROLES.SUPER_ADMIN) {
    return responseHandler.forbidden(); // 403 Forbidden yanıtı
  }

  try {
    // 2. Sadece yetkili kullanıcı bu işlemi yapabilir
    await userService.deleteUser(params.id);
    return responseHandler.success(null, 'Kullanıcı başarıyla silindi.');
  } catch (error) {
    return responseHandler.error(error);
  }
}
```

### 25. Katman 2: Sayfa Erişimi (Middleware)

- **Amaç:** Kullanıcıları, rollerine göre erişim yetkileri olmayan sayfalara girmekten alıkoymak. Bu, `middleware.ts` dosyası aracılığıyla yönetilir.
- **Uygulama:**
    1.  `middleware.ts` dosyasında, korunması gereken URL yolları (`